<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Telerik.Windows.Synchronization.Cloud</name>
    </assembly>
    <members>
        <member name="T:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1">
            <summary>
            Represents an <see cref="T:Telerik.Windows.Cloud.ISynchronizationServiceProvider`1"/> implementation targeting
            the Everlive cloud services.
            </summary>
            <typeparam name="TItem">The Everlive content type to work with.</typeparam>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1"/> class.
            </summary>
            <param name="localDatabaseName">Name of the local database.</param>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1.GetLocalStorage">
            <summary>
            Gets the local storage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1.GetCloudService">
            <summary>
            Gets the cloud service.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1.GetIdentificatorProvider">
            <summary>
            Gets the identificator provider.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Cloud.EverliveSyncServiceProvider`1.DatabaseName">
            <summary>
            Gets the name of the database.
            </summary>
            <value>
            The name of the database.
            </value>
        </member>
        <member name="T:Telerik.Windows.Cloud.EverliveIdentificatorProvider`1">
            <summary>
            Represents the GUID provider for the Everlive implementation of the synchronization mechanism.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveIdentificatorProvider`1.GetLocalStorageGuidForItem(`0)">
            <summary>
            Gets the local storage GUID for item. The local storage GUID
            uniquely identifies the instance in the local database.
            </summary>
            <param name="item">The item to get the local storage GUID for.</param>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveIdentificatorProvider`1.GetSynchronizationId">
            <summary>
            Gets the synchronization GUID that uniquely identifies the application
            that uses the synchronization infrastructure.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.EverliveIdentificatorProvider`1.ResetSynchronizationId">
            <summary>
            Resets the synchronization GUID that uniquely identifies the application
            that uses the synchronization infrastructure.
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnection">
            <summary>
            Represents an open connection to a SQLite database.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.#ctor(System.String,SQLite.SQLiteOpenFlags,System.Boolean)">
            <summary>
            Constructs a new SQLiteConnection and opens a SQLite database specified by databasePath.
            </summary>
            <param name="databasePath">
            Specifies the path to the database file.
            </param>
            <param name="storeDateTimeAsTicks">
            Specifies whether to store DateTime properties as ticks (true) or strings (false). You
            absolutely do want to store them as Ticks in all new projects. The default of false is
            only here for backwards compatibility. There is a *significant* speed advantage, with no
            down sides, when setting storeDateTimeAsTicks = true.
            </param>
        </member>
        <member name="F:SQLite.SQLiteConnection._preserveDuringLinkMagic">
            <summary>
            Used to list some code that we want the MonoTouch linker
            to see, but that we never want to actually execute.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping(System.Type)">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <param name="type">
            The type whose mapping to the database is returned.
            </param>
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.GetMapping``1">
            <summary>
            Retrieves the mapping that is automatically generated for the given type.
            </summary>
            <returns>
            The mapping represents the schema of the columns of the database and contains 
            methods to set and get properties of objects.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DropTable``1">
            <summary>
            Executes a "drop table" on the database.  This is non-recoverable.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable``1">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateTable(System.Type)">
            <summary>
            Executes a "create table if not exists" on the database. It also
            creates any specified indexes on the columns of the table. It uses
            a schema automatically generated from the specified type. You can
            later access this schema by calling GetMapping.
            </summary>
            <param name="ty">Type to reflect to a database table.</param>
            <returns>
            The number of entries added to the database schema.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.NewCommand">
            <summary>
            Creates a new SQLiteCommand. Can be overridden to provide a sub-class.
            </summary>
            <seealso cref="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)"/>
        </member>
        <member name="M:SQLite.SQLiteConnection.CreateCommand(System.String,System.Object[])">
            <summary>
            Creates a new SQLiteCommand given the command text with arguments. Place a '?'
            in the command text for each of the arguments.
            </summary>
            <param name="cmdText">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the command text.
            </param>
            <returns>
            A <see cref="T:SQLite.SQLiteCommand"/>
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Execute(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            Use this method instead of Query when you don't expect rows back. Such cases include
            INSERTs, UPDATEs, and DELETEs.
            You can set the Trace or TimeExecution properties of the connection
            to profile execution.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            The number of rows modified in the database as a result of this execution.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery``1(System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the mapping automatically generated for
            the given type.
            </summary>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Query(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeferredQuery(SQLite.TableMapping,System.String,System.Object[])">
            <summary>
            Creates a SQLiteCommand given the command text (SQL) with arguments. Place a '?'
            in the command text for each of the arguments and then executes that command.
            It returns each row of the result using the specified mapping. This function is
            only used by libraries in order to query the database via introspection. It is
            normally not used.
            </summary>
            <param name="map">
            A <see cref="T:SQLite.TableMapping"/> to use to convert the resulting rows
            into objects.
            </param>
            <param name="query">
            The fully escaped SQL.
            </param>
            <param name="args">
            Arguments to substitute for the occurences of '?' in the query.
            </param>
            <returns>
            An enumerable with one result for each row returned by the query.
            The enumerator will call sqlite3_step on each call to MoveNext, so the database
            connection must remain open for the lifetime of the enumerator.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Table``1">
            <summary>
            Returns a queryable interface to the table represented by the given type.
            </summary>
            <returns>
            A queryable object that is able to translate Where, OrderBy, and Take
            queries into native SQL.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Get``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate. Throws a not found exception
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Object)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find(System.Object,SQLite.TableMapping)">
            <summary>
            Attempts to retrieve an object with the given primary key from the table
            associated with the specified type. Use of this method requires that
            the given type have a designated PrimaryKey (using the PrimaryKeyAttribute).
            </summary>
            <param name="pk">
            The primary key.
            </param>
            <param name="map">
            The TableMapping used to identify the object type.
            </param>
            <returns>
            The object with the given primary key or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Find``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Attempts to retrieve the first object that matches the predicate from the table
            associated with the specified type. 
            </summary>
            <param name="predicate">
            A predicate for which object to find.
            </param>
            <returns>
            The object that matches the given predicate or null
            if the object is not found.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.BeginTransaction">
            <summary>
            Begins a new transaction. Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction.
            </summary>
            <example cref="T:System.InvalidOperationException">Throws if a transaction has already begun.</example>
        </member>
        <member name="M:SQLite.SQLiteConnection.SaveTransactionPoint">
            <summary>
            Creates a savepoint in the database at the current point in the transaction timeline.
            Begins a new transaction if one is not in progress.
            
            Call <see cref="M:SQLite.SQLiteConnection.RollbackTo(System.String)"/> to undo transactions since the returned savepoint.
            Call <see cref="M:SQLite.SQLiteConnection.Release(System.String)"/> to commit transactions after the savepoint returned here.
            Call <see cref="M:SQLite.SQLiteConnection.Commit"/> to end the transaction, committing all changes.
            </summary>
            <returns>A string naming the savepoint.</returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Rollback">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String)">
            <summary>
            Rolls back the savepoint created by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or SaveTransactionPoint.
            </summary>
            <param name="savepoint">The name of the savepoint to roll back to, as returned by <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  If savepoint is null or empty, this method is equivalent to a call to <see cref="M:SQLite.SQLiteConnection.Rollback"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.RollbackTo(System.String,System.Boolean)">
            <summary>
            Rolls back the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
            <param name="noThrow">true to avoid throwing exceptions, false otherwise</param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Release(System.String)">
            <summary>
            Releases a savepoint returned from <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/>.  Releasing a savepoint 
               makes changes since that savepoint permanent if the savepoint began the transaction,
               or otherwise the changes are permanent pending a call to <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            
            The RELEASE command is like a COMMIT for a SAVEPOINT.
            </summary>
            <param name="savepoint">The name of the savepoint to release.  The string should be the result of a call to <see cref="M:SQLite.SQLiteConnection.SaveTransactionPoint"/></param>
        </member>
        <member name="M:SQLite.SQLiteConnection.Commit">
            <summary>
            Commits the transaction that was begun by <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/>.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnection.RunInTransaction(System.Action)">
            <summary>
            Executes <param name="action"/> within a (possibly nested) transaction by wrapping it in a SAVEPOINT. If an
            exception occurs the whole transaction is rolled back, not just the current savepoint. The exception
            is rethrown.
            </summary>
            <param name="action">
            The <see cref="T:System.Action"/> to perform within a transaction. <param name="action"/> can contain any number
            of operations on the connection but should never call <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> or
            <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </param>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.String)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertAll(System.Collections.IEnumerable,System.Type)">
            <summary>
            Inserts all specified objects.
            </summary>
            <param name="objects">
            An <see cref="!:IEnumerable"/> of the objects to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.InsertOrReplace(System.Object,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            If a UNIQUE constraint violation occurs with
            some pre-existing object, this function deletes
            the old object.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Insert(System.Object,System.String,System.Type)">
            <summary>
            Inserts the given object and retrieves its
            auto incremented primary key if it has one.
            </summary>
            <param name="obj">
            The object to insert.
            </param>
            <param name="extra">
            Literal SQL code that gets placed into the command. INSERT {extra} INTO ...
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows added to the table.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Update(System.Object,System.Type)">
            <summary>
            Updates all of the columns of a table using the specified object
            except for its primary key.
            The object is required to have a primary key.
            </summary>
            <param name="obj">
            The object to update. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <param name="objType">
            The type of object to insert.
            </param>
            <returns>
            The number of rows updated.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.UpdateAll(System.Collections.IEnumerable)">
            <summary>
            Updates all specified objects.
            </summary>
            <param name="objects">
            An <see cref="T:System.Collections.IEnumerable"/> of the objects to insert.
            </param>
            <returns>
            The number of rows modified.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete(System.Object)">
            <summary>
            Deletes the given object from the database using its primary key.
            </summary>
            <param name="objectToDelete">
            The object to delete. It must have a primary key designated using the PrimaryKeyAttribute.
            </param>
            <returns>
            The number of rows deleted.
            </returns>
        </member>
        <member name="M:SQLite.SQLiteConnection.Delete``1(System.Object)">
            <summary>
            Deletes the object with the specified primary key.
            </summary>
            <param name="primaryKey">
            The primary key of the object to delete.
            </param>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of object.
            </typeparam>
        </member>
        <member name="M:SQLite.SQLiteConnection.DeleteAll``1">
            <summary>
            Deletes all the objects from the specified table.
            WARNING WARNING: Let me repeat. It deletes ALL the objects from the
            specified table. Do you really want to do that?
            </summary>
            <returns>
            The number of objects deleted.
            </returns>
            <typeparam name='T'>
            The type of objects to delete.
            </typeparam>
        </member>
        <member name="P:SQLite.SQLiteConnection.BusyTimeout">
            <summary>
            Sets a busy handler to sleep the specified amount of time when a table is locked.
            The handler will sleep multiple times until a total time of <see cref="P:SQLite.SQLiteConnection.BusyTimeout"/> has accumulated.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.TableMappings">
            <summary>
            Returns the mappings from types to tables that the connection
            currently understands.
            </summary>
        </member>
        <member name="P:SQLite.SQLiteConnection.IsInTransaction">
            <summary>
            Whether <see cref="M:SQLite.SQLiteConnection.BeginTransaction"/> has been called and the database is waiting for a <see cref="M:SQLite.SQLiteConnection.Commit"/>.
            </summary>
        </member>
        <member name="T:SQLite.SQLiteConnectionString">
            <summary>
            Represents a parsed connection string.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteCommand.OnInstanceCreated(System.Object)">
             <summary>
             Invoked every time an instance is loaded from the database.
             </summary>
             <param name="obj">
             The newly created object.
             </param>
             <remarks>
             This can be overridden in combination with the <see cref="M:SQLite.SQLiteConnection.NewCommand"/>
             method to hook into the life-cycle of objects.
            
             Type safety is not possible because MonoTouch does not support virtual generic methods.
             </remarks>
        </member>
        <member name="T:SQLite.PreparedSqlLiteInsertCommand">
            <summary>
            Since the insert never changed, we only need to prepare once.
            </summary>
        </member>
        <member name="M:SQLite.TableQuery`1.CompileNullBinaryExpression(System.Linq.Expressions.BinaryExpression,SQLite.TableQuery{`0}.CompileResult)">
            <summary>
            Compiles a BinaryExpression where one of the parameters is null.
            </summary>
            <param name="parameter">The non-null parameter</param>
        </member>
        <member name="M:SQLite.SQLiteConnectionPool.Reset">
            <summary>
            Closes all connections managed by this pool.
            </summary>
        </member>
        <member name="M:SQLite.SQLiteConnectionPool.ApplicationSuspended">
            <summary>
            Call this method when the application is suspended.
            </summary>
            <remarks>Behaviour here is to close any open connections.</remarks>
        </member>
        <member name="P:SQLite.SQLiteConnectionPool.Shared">
            <summary>
            Gets the singleton instance of the connection tool.
            </summary>
        </member>
        <member name="T:Telerik.Windows.Cloud.SynchronizableDataItem">
            <summary>
            Represents a <see cref="T:Telerik.Everlive.Sdk.Core.Model.Base.DataItem"/> that can be stored locally and synced with the cloud.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.GetRelatedItems``1">
            <summary>
            Gets the related items of the provided TItem type described by an associated <see cref="T:Telerik.Windows.Cloud.RelationAttribute"/> instance.
            </summary>
            <typeparam name="TItem">The type of the related items to this <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all related items.</returns>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.SynchronizeAsync">
            <summary>
            Synchronizes the current object by either creating a new instance of it
            in the correposnding content type table, updating an existing one or updating the
            current instance with a newer one that resides in the cloud.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.UpdateAsync">
            <summary>
            Updates the current <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation locally.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.DeleteAsync">
            <summary>
            Deletes the current <see cref="T:Telerik.Windows.Cloud.SynchronizableDataItem"/> on the server.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.CreateSynchronizationContext">
            <summary>
            Creates an implementation of the <see cref="T:Telerik.Windows.Cloud.ISynchronizationContext"/> interface
            that is used when the current <see cref="T:Telerik.Windows.Cloud.SynchronizableDataItem"/> is synchronized.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.SynchWithObject(Telerik.Windows.Cloud.ISynchronizableCloudItem)">
            <summary>
            Copies all properties from the source object to the current <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation.
            </summary>
            <param name="source">The <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation to copy the property values from.</param>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.InitSynchronizationContext(Telerik.Windows.Cloud.ISynchronizationContext)">
            <summary>
            Called by the <see cref="T:Telerik.Windows.Cloud.ISynchronizationContext"/> implementation which
            will take care of the synchronization of the current <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.ResetSynchronizationContext">
            <summary>
            Resets the <see cref="T:Telerik.Windows.Cloud.ISynchronizationContext"/> implementation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.PrepareForStoringLocally">
            <summary>
            Called when the item is about to be stored locally.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.OnObjectRetrievedFromLocalDataBase">
            <summary>
            Called when the item has just been retrieved from the local database.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.OnItemUpdatedOnServer(System.Object)">
            <summary>
            Called when the current <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation has been uploaded on the Cloud.
            </summary>
            <param name="creationInfo">An object containing the server information about the time the object was uploaded on the server..</param>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.SuspendPropertyChangeTracking">
            <summary>
            Suspends any property changed tracking mechanism on the <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.ResumePropertyChangeTracking">
            <summary>
            Resumes any property changed tracking mechanisms on the <see cref="T:Telerik.Windows.Cloud.ISynchronizableCloudItem"/> implementation.
            </summary>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="args">The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Telerik.Windows.Cloud.SynchronizableDataItem.OnItemInitialized">
            <summary>
            Called when the item has been initialized.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.LocalStorageId">
            <summary>
            Gets or sets the local storage ID of the object.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.DirtyProperties">
            <summary>
            Gets or sets a comma-separated list of property names
            that were dirty upon storing the object in the local
            database.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.IsObjectModifiedLocally">
            <summary>
            Gets or sets a boolean value determining whether the object has been
            modified locally upon storing in the local database.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified property.
            </summary>
            <value>
            The <see cref="T:System.Object"/>.
            </value>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.SynchronizationId">
            <summary>
            Gets or sets the synchronization ID.
            </summary>
            <value>
            The synchronization ID.
            </value>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.IsSynchronizing">
            <summary>
            Gets a boolean value determining whether the current <see cref="T:Telerik.Windows.Cloud.ISynchronizable"/> implementation
            performs a synchronization procedure.
            </summary>
        </member>
        <member name="P:Telerik.Windows.Cloud.SynchronizableDataItem.IsDeleted">
            <summary>
            Gets or sets a boolean value determining whether the item is deleted from the local storage.
            </summary>
        </member>
    </members>
</doc>
